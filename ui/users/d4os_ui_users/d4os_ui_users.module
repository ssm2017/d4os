<?php
/**
 * @package   d4os_ui_users
 * @copyright Copyright (C) 2010-2012 Wene - ssm2017 Binder ( S.Massiaux ). All rights reserved.
 * @link      http://www.d4os.org
 * @license   GNU/GPL, http://www.gnu.org/licenses/gpl-2.0.html
 * D4os is free software. This version may have been modified pursuant
 * to the GNU General Public License, and as distributed it includes or
 * is derivative of works licensed under the GNU General Public License or
 * other free or open source software licenses.
 */

define('FIRSTNAME_MAX_LENGTH', 31);
define('LASTNAME_MAX_LENGTH', 31);

module_load_include('helpers.inc', 'd4os_ui_users');

function d4os_ui_users_help($path, $arg) {
  switch ($path) {
    case 'admin/help#d4os_ui_users':
      return '<p>' . t('OpenSim grid users management') . '</p>';
  }
}

function d4os_ui_users_menu() {
  $items = array();
  $items['grid/users/autocomplete'] = array(
    'title'             => 'User autocomplete',
    'page callback'     => 'd4os_ui_users_user_autocomplete',
    'access arguments'  => array('access user profiles'),
    'type'              => MENU_CALLBACK,
  );
  $items['admin/config/d4os/ui/users'] = array(
    'title'             => 'users',
    'description'       => 'd4os ui users settings',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('d4os_ui_users_admin'),
    'access arguments'  => array('admin d4os ui users'),
    'type'              => MENU_NORMAL_ITEM,
    'file'              => 'd4os_ui_users.admin.inc'
  );
  $items['user/%user/grid/register'] = array(
    'title'             => 'Grid registration',
    'description'       => 'Registers the user on the grid.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('d4os_ui_users_grid_registration_form'),
    'access callback'   => 'd4os_ui_users_can_register_on_grid',
    'access arguments'  => array(1),
    'type'              => MENU_LOCAL_TASK,
  );
  return $items;
}

function d4os_ui_users_theme() {
  return array(
    'd4os_ui_users_models_select_form' => array(
      'arguments' => array('form'),
    ),
  );
}

/**
 * Hook permission
 */
function d4os_ui_users_permission() {
  return array(
    'admin d4os ui users' => array(
      'title' => t('Administer d4os'),
      'description' => t('Perform administration tasks for d4os ui users.'),
    ),
    'search d4os ui users' => array(
      'title' => t('Search users by uuid'),
      'description' => t('Search users by uuid.'),
    ),
  );
}

function d4os_ui_users_cron() {
  // do the job
  d4os_ui_users_set_region_owner_role();
}

function d4os_ui_users_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {

    // login
    case 'user_login_block':
    case 'user_login':
      d4os_ui_users_login_form($form);
      break;

    // registration
    case 'user_register_form':
      // check if the datastore is alive
      $d4os_user = D4OS_IO::create('Users');
      $d4os_user->ping();
      if ($d4os_user->response->success !== TRUE) {
        drupal_set_message(t('You can not register an account.'), 'error');
        drupal_set_message(t('Please try again later.'), 'error');
        drupal_goto();
      }
      d4os_ui_users_register_form($form);
      break;

    // profile edition
    case 'user_profile_form':
      // check if the datastore is alive
      $d4os_user = D4OS_IO::create('Users');
      $d4os_user->ping();
      if ($d4os_user->response->success !== TRUE) {
        drupal_set_message(t('You can not edit an account.'), 'error');
        drupal_set_message(t('Please try again later.'), 'error');
        drupal_goto();
      }
      d4os_ui_users_profile_form($form);
      break;
  }
}

function d4os_ui_users_login_form(&$form) {
  if (module_exists('openid')) {
    $form['#attached']['js'][] = drupal_get_path('module', 'd4os_ui_users').'/d4os_ui_users.js';
  }
  if (!module_exists('d4os_ui_auth')) {
    array_unshift($form['#validate'], 'd4os_ui_users_login_authenticate_validate');
  }
}

function d4os_ui_users_register_form(&$form) {
  // workaround for this bug : http://drupal.org/node/760838
  if (isset($form['account'])) {
    $form['account']['mail']['#weight'] = -2;
    $form['account']['name']['#description'] = 'A two word name is required for grid access.';
  }
  else {
    $form['mail']['#weight'] = -2;
    $form['name']['#description'] = 'A two word name is required for grid access.';
  }
  $form['account']['mail2'] = array(
    '#type'           => 'textfield',
    '#title'          => t('E-mail address confirmation'),
    '#default_value'  => '',
    '#maxlength'      => EMAIL_MAX_LENGTH,
    '#description'    => t('Confirm your email address please.'),
    '#required'       => TRUE,
    '#weight'         => -1,
  );
  array_unshift($form['#validate'], 'd4os_ui_users_account_validate');
}

function d4os_ui_users_profile_form(&$form) {
  array_unshift($form['#validate'], 'd4os_ui_users_account_validate');
  $form['account']['name']['#description'] = 'A two word name is required for grid access.';
}

}

function d4os_ui_users_user_view($account, $view_mode, $langcode) {
  // check if the user exists in the grid
  $uuid = db_query("SELECT UUID FROM {d4os_ui_users} WHERE uid=:uid", array(':uid' => $account->uid))->fetchField();
  if ($uuid === FALSE) {
    drupal_set_message(t('User not registered InWorld.'));
  }
  else {
    $account->content['grid']['account'] = array(
      '#type'   => 'user_profile_category',
      '#title'  => t('InWorld'),
    );
    $account->content['grid']['account']['uuid'] = array(
      '#type'   => 'user_profile_item',
      '#title'  => t('Uuid'),
      '#markup' => $uuid,
      '#weight' => 0,
    );
  }
}

function d4os_ui_users_user_delete($edit, $account, $method) {
  // check if the user exists in the grid
  $uuid = db_query("SELECT UUID FROM {d4os_ui_users} WHERE uid=:uid", array(':uid' => $edit->uid))->fetchField();
  if ($uuid !== FALSE) {
    // delete the user in the grid
    $d4os_user = D4OS_IO::create('Users');
    $d4os_user->delete_user($uuid);
    // delete drupal link
    db_query("DELETE FROM {d4os_ui_users} WHERE UUID = :uuid OR uid = :uid", array(':uuid' => $uuid, ':uid' => $edit->uid));
  }
}

function d4os_ui_users_user_update(&$edit, $account, $category) {
  // check if the user is admin
  if ($account->uid < 2) return;

  // check if the user is registered on the grid
  $uuid = db_query("SELECT UUID FROM {d4os_ui_users} WHERE uid=:uid", array(':uid' => $account->uid))->fetchField();
  if ($uuid === FALSE) return;

  // load the grid user
  $d4os_users = D4OS_IO::create('Users');
  $grid_user = $d4os_users->load_user(array('PrincipalID' => $uuid));
  $grid_user = $grid_user[0];

  // check if username has changed
  if (!empty($edit['name'])) {
    $names = explode(' ', $edit['name']);
    if (count($names) == 2) {
      $grid_user->FirstName = $names[0];
      $grid_user->LastName = $names[1];
    }
  }

  // check if email has changed
  if (!empty($edit['mail'])) {
    $grid_user->Email = empty($edit['mail']) ? $grid_user->Email : $edit['mail'];
    $grid_user->Email = ($grid_user->Email != $edit['mail']) ? $edit['mail'] : $grid_user->Email;
  }

  // check if password has changed
  if (isset($edit['pass_raw']) && (!empty($edit['pass_raw'])) && (strlen($edit['pass_raw']) > 0) && (md5($edit['pass_raw']) != $account->pass)) {
    $grid_user->passwordSalt = md5(microtime() . mt_rand(0,0xffff));
    $grid_user->passwordHash = md5(md5($edit['pass_raw']) . ":" . $grid_user->passwordSalt);
  }

  // set user level
  $grid_user->UserLevel = d4os_ui_users_get_user_level($edit['roles']);

  // save the grid user
  $d4os_users->set_uuid($account->uid, $grid_user->PrincipalID);
  $d4os_users->save_user($grid_user);
}

function d4os_ui_users_login_authenticate_validate($form, &$form_state) {
  // check for the openid module
  if (module_exists('openid')) {
    if (!empty($form_state['values']['openid_identifier'])) {
      drupal_set_message(t('Using openid.'), 'warning');
      return;
    }
  }
  // TODO : show a message to the users if they are not allowed to log in the grid
}

function d4os_ui_users_can_register_on_grid($account) {
  d4os_init(); // TODO : why this ? why drupal loads this function before asking hook_init ?
  // check the datastore
  $d4os_user = D4OS_IO::create('Users');
  $d4os_user->ping();
  if ($d4os_user->response->success !== TRUE) {
    drupal_set_message(t('You can not register an account.'), 'error');
    drupal_set_message(t('Please try again later.'), 'error');
    return FALSE;
  }

  // check if the account is admin
  if ($account->uid == 1) return FALSE;

  // check if the account is already registered on the grid
  $uuid = db_query("SELECT UUID FROM {d4os_ui_users} WHERE uid=:uid", array(':uid' => $account->uid))->fetchField();
  if ($uuid !== FALSE) return FALSE;

  // Check if they are the proper role for registering.
  $register_role = variable_get('d4os_ui_users_register_role', 0);
  if ($register_role && !isset($account->roles[$register_role])) {
      return FALSE;
  }

  // else
  return TRUE;
}

function d4os_ui_users_grid_registration_form($form_state) {
  $form = array();
  $form['notice'] = array(
    '#type' => 'item',
    '#value' => t('This form will allow you to create an account on the grid.')
  );
  $form['password_validation'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Password check'),
    '#collapsible'  => FALSE,
    '#collapsed'    => FALSE,
    '#description'  => t('You need to enter your password for validation.'),
  );
  $form['password_validation']['pass'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#maxlength' => 64,
    '#size' => 15,
  );
  d4os_ui_users_avatars_models_select_form($form);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create avatar'),
    '#weight' => 99
  );
  return $form;
}

function d4os_ui_users_grid_registration_form_validate($form, &$form_state) {
  // check the datastore
  $d4os_user = D4OS_IO::create('Users');
  $d4os_user->ping();
  if ($d4os_user->response->success !== TRUE) {
    drupal_set_message(t('You can not edit an account.'), 'error');
    drupal_set_message(t('Please try again later.'), 'error');
    form_set_error();
  }

  // get the account
  $uid = arg(1);
  if (1 == $uid)
    $uid = $form_state['uid'];
  $account = user_load($uid);

  // check the password
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  if (!user_check_password($form_state['values']['pass'], $account)) {
    form_set_error('pass', t('Wrong password.'));
  }

  // check for the model
  if (isset($form_state['values']['model_uuid']) && $form_state['values']['model_uuid'] == '') {
    form_set_error('model', t('Please select a model.'));
  }
}

function d4os_ui_users_grid_registration_form_submit($form, &$form_state, $redirect = TRUE) {
  // get the account
  $uid = arg(1);
  if (1 == $uid)
    $uid = $form_state['uid'];
  $account = user_load($uid);

  // get names
  $names = explode(' ', $account->name);

  // define the model_uuid
  $model_uuid = UUID_ZERO;
  if (isset($form_state['values']['model_uuid'])) {
    $model_uuid = $form_state['values']['model_uuid'];
  }

  // build the grid account
  $grid_user = d4os_ui_users_generate_user($names[0], $names[1], $form_state['values']['pass'], $account->mail, UUID_ZERO, $model_uuid);
  $d4os_user = D4OS_IO::create('Users');
  $d4os_user->set_uuid($account->uid, $grid_user->PrincipalID);
  $d4os_user->save_user($grid_user);

  // assign the default grid user role
  d4os_ui_users_set_grid_user_role($account->uid);

  // redirect
  if ($redirect)
    $form_state['redirect'] = 'user/'. $uid;
}

function d4os_ui_users_set_grid_user_role($uid) {
  if (!is_numeric($uid)) return;

  // get the grid user rid
  $rid = variable_get('d4os_ui_users_default_grid_user_role',0);
  if ($rid == 0) return;

  // remove assigned roles
  db_query("DELETE FROM {users_roles} WHERE rid=:rid AND uid=:uid", array(':rid' => $rid, ':uid' => $uid));

  // assign the role
  db_query("INSERT INTO {users_roles} (rid, uid) VALUES (:rid, :uid)", array(':rid' => $rid, ':uid' => $uid));
}

function d4os_ui_users_account_validate($form, &$form_state) {
	$values = &$form_state['values'];

  // check if email address matches
  if ($values['form_id'] != 'user_profile_form') {
    if ($values['mail'] != $values['mail2']) {
      form_set_error('mail2', t('The email address does not match.'));
    }
  }

  // check for the model
  if (isset($values['model_uuid']) && $values['model_uuid'] == '') {
    form_set_error('model', t('Please select a model.'));
  }

  // get firstname and lastname
  $name = $values['name'];
  if (isset($name)) {
    $names = explode(' ', $name);
    if (count($names) == 2) {
      $firstname = $names[0];
      $lastname = $names[1];
      $values['firstname'] = $firstname;
      $values['lastname'] = $lastname;
    }
  }

  // check the username
  $name_validate = d4os_ui_users_validate_name($name);
  if ($name_validate != '') {
    form_set_error('name', $name_validate);
    return;
  }
  // check the password length
  if (isset($values['pass']) && !empty($values['pass']) && strlen($values['pass']) < 6) {
    form_set_error('pass', t('The Password field must be at least 6 characters in length.'));
  }

  // Save the new raw password for later.  Coz in D7, we don't get to access this raw password later.
  if (isset($values['pass']) && !empty($values['pass']) && strlen($values['pass']) > 0) {
    $form_state['values']['pass_raw'] = $values['pass'];
  }

  // check the email address to fit new opensim rules
  if (!d4os_ui_users_validate_email($values['mail'])) {
    form_set_error('pass', t('The Email field must contain a valid email address.'));
  }

  // get the inworld user
  $d4os_user = D4OS_IO::create('Users');
  $grid_user = $d4os_user->load_user(array('name' => $name));
  $grid_user = $grid_user[0];

  switch ($values['form_id']){
    case 'user_register_form':
      // check if user already exists when registering
      if (is_object($grid_user)) {
        form_set_error('firstname', t('This name already exists'));
        return;
      }
      break;
    case 'user_profile_form':
      // get the user uuid
      $uuid = db_query("SELECT UUID FROM {d4os_ui_users} WHERE uid=:uid", array(':uid' => $form_state['user']->uid))->fetchField();
      if ($uuid === FALSE) return;
      // check if the user already exists after changing username
      if (is_object($grid_user) && $grid_user->PrincipalID != $uuid) {
        form_set_error('name', t('This name already exists'));
        return;
      }
      break;
  }
}

function d4os_ui_users_search_info() {
  return array(
    'title' => t('Avatar by uuid'),
    'path' => 'uuid'
  );
}

function d4os_ui_users_search_access() {
  //return user_access('search d4os ui users');
  return TRUE;
}

function d4os_ui_users_search_execute($keys = NULL, $conditions = NULL) {
  // TODO : not working
  $find = array();

  $keys = preg_replace('!\*+!', '%', $keys);
  $query = db_select('users', 'u')
          ->fields ('u',
            array (
              'name',
              'uid',
            )
          );
  $query->leftJoin('d4os_ui_users', 'du', 'du.uid=u.uid');
  $query->condition('du.UUID', array(':uuid' => $keys))
          ->extend('PagerDefault')
          ->limit(15);

  $results = $query->execute();
  foreach ($results as $result) {
    $find[] = array(
      'title' => $result->name,
      'link'  => url('user/'. $result->uid, array('absolute' => TRUE))
    );
  }
  return $find;
}

function d4os_ui_users_search($op = 'search', $keys = NULL, $skip_access_check = FALSE) {
  switch ($op) {
    case 'name':
      if ($skip_access_check || user_access('search d4os ui users')) {
        return 'Avatars par uuid';
      }
    case 'search':
      if (user_access('search d4os ui users')) {
        $find = array();
        // Replace wildcards with MySQL/PostgreSQL wildcards.
        $keys = preg_replace('!\*+!', '%', $keys);
        $query = "SELECT u.name, u.uid FROM {users} AS u"
              . " LEFT JOIN {d4os_ui_users} AS du ON du.UUID='%s'"
              . " WHERE u.uid=du.uid";
        $result = pager_query($query, 15, 0, NULL, $keys);
        while ($account = db_fetch_object($result)) {
          $find[] = array(
            'title' => $account->name,
            'link'  => url('user/'. $account->uid, array('absolute' => TRUE))
          );
        }
        return $find;
      }
  }
}

function d4os_ui_users_avatars_models_select_form(&$form) {
// TODO : use caching
  // get the list of models
  $available_models = array();
  for ($i=1; $i<11; ++$i) {
    $model_uuid_nbr = 'd4os_ui_users_default_model_uuid_'. $i;
    $model_uuid = variable_get($model_uuid_nbr, UUID_ZERO);
    if ($model_uuid != UUID_ZERO && $model_uuid != '') {
      $model_name_nbr = 'd4os_ui_users_default_model_name_'. $i;
      $model_picture_url_nbr = 'd4os_ui_users_default_model_picture_url_'. $i;
      $model = new stdClass();
      $model->uuid = $model_uuid;
      $model->name = variable_get($model_name_nbr, 'model');
      $model->picture_url = variable_get($model_picture_url_nbr, '');
      $available_models[] = $model;
    }
  }
  if (count($available_models) == 0) {
    return;
  }

  // get some vars
  $image_width = variable_get('d4os_ui_users_models_image_width', '150');
  $use_lightbox2 = variable_get('d4os_ui_users_models_image_use_lightbox2', 0);

  // build the form fieldset
  $form['models'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Models'),
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
    '#description'  => t('Please select an avatar to use. You will be able to change it later.'),
    //'#theme'        => 'd4os_ui_users_models_select_form',
  );

  $header = array (
    'name' => t('Name'),
    'picture' => t('Picture')
  );

  $options = array();
  $i = 1;
  foreach($available_models as $available_model) {
    // get the picture
    $picture = theme_image(
      array(
        'path' => $model->picture_url,
        'width' => $image_width. 'px',
        'alt' => t('No picture available'),
        'title' => t("!user's picture", array('!user'=>$model->name)),
        'attributes' => array()
      )
    );
    if ($use_lightbox2 == 1) {
      $picture = l($picture,
                   $model->picture_url,
                   array('html' => TRUE, 'attributes'=> array('rel' => 'lightbox[models]')));
    }

    // fill the options
    $options[$available_model->uuid] = array (
      'name' => $available_model->name,
      'picture' => $picture,
    );
    ++$i;
  }
  $form['models']['model_uuid'] = array (
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#multiple' => FALSE,
  );
}

function d4os_ui_users_set_region_owner_role() {
  // get the list
  $d4os_regions = D4OS_IO::create('Regions');
  $owners = $d4os_regions->get_regions_owners();

  if (!is_array($owners)) {
    return FALSE;
  }

  // get the owner rid
  $rid = variable_get('d4os_ui_users_default_region_owner_role',0);
  if ($rid == 0) return;

  // remove owner roles
  db_query('DELETE FROM {users_roles} WHERE rid=:rid', array(':rid' => $rid));

  // for each owner, assign the role
  foreach ($owners as $owner) {
    // get the owner uid
    $uid = db_query("SELECT uid FROM {d4os_ui_users} WHERE UUID=:uuid", array(':uuid' => $owner->owner_uuid))->fetchField();
    // assign the role
    if (is_numeric($uid)) {
      db_query("INSERT INTO {users_roles} (rid, uid) VALUES (:rid, :uid)", array(':rid' => $rid, ':uid' => $uid));
    }
  }
}

function d4os_ui_users_user_autocomplete($string = '') {
  $matches = array();
  if ($string) {

    $query = db_select('users', 'u');
    $query->fields ('u', array ('name'));
    $query->leftJoin('d4os_ui_users', 'du', 'du.uid=u.uid');
    $query->isNotNull('du.uid');
    $query->condition('u.name', db_like($string) . '%', 'LIKE');
    $query->range(0, 10);
    $result = $query->execute();

    foreach ($result as $user) {
      $matches[$user->name] = check_plain($user->name);
    }
  }

  drupal_json_output($matches);
}